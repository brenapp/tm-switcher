# Creates a Release Candidate on push

name: Release Candidate

on:
  push:
    tags: 
     - 'v*.*.*' # This will trigger the workflow on any tag that starts with v, followed by any number of digits and dots.

jobs:
  create-release:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.create-release.outputs.result }}
    steps:
      - uses: actions/checkout@v4
      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
      - name: get version
        run: echo "PACKAGE_VERSION=$(node -p "require('./package.json').version")" >> $GITHUB_ENV
      - name: create release
        id: create-release
        uses: actions/github-script@v6
        with:
          script: |
            const { data } = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: `v${process.env.PACKAGE_VERSION}`,
              name: `TM Switcher v${process.env.PACKAGE_VERSION}`,
              body: '',
              draft: true,
              prerelease: false
            })
            return data.id
  
  build:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest' # for Arm based macs (M1 and above).
            args: '--target aarch64-apple-darwin'
          - platform: 'macos-latest' # for Intel based macs.
            args: '--target x86_64-apple-darwin'
          - platform: 'ubuntu-22.04' # for Tauri v1 you could replace this with ubuntu-20.04.
            args: ''
          - platform: 'windows-latest'
            args: ''
    needs: create-release
    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04' # This must match the platform value defined above.
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: 'npm' # Set this to npm, yarn or pnpm.

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          # Those targets are only used on macos runners so it's in an `if` to slightly speed up windows and linux builds.
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './host/src-tauri -> target'

      - name: npm ci
        run: | 
          npm ci 
          npm --prefix host ci
      
      - name: npm switcher:build
        run: |
            npm run switcher:build

      # Compile to Native 
      - name: npm run switcher:compile:aarch64-apple-darwin
        if: matrix.platform == 'macos-latest' && matrix.args == '--target aarch64-apple-darwin'
        run: |
          npm run switcher:compile:aarch64-apple-darwin
      - name: npm run switcher:compile:x86_64-apple-darwin
        if: matrix.platform == 'macos-latest' && matrix.args == '--target x86_64-apple-darwin'
        run: |
          npm run switcher:compile:x86_64-apple-darwin
      - name: npm run switcher:compile:x86_64-pc-windows-gnu
        if: matrix.platform == 'windows-latest'
        run: |
          npm run switcher:compile:x86_64-pc-windows-msvc
      - name: npm run switcher:compile:x86_64-unknown-linux-gnu
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          npm run switcher:compile:x86_64-unknown-linux-gnu

      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          releaseId: ${{ needs.create-release.outputs.release_id }}
          appName: 'TM Switcher'
          releaseName: 'TM Switcher v__VERSION__'
          tagName: 'v__VERSION__'
          releaseDraft: true
          includeUpdaterJson: true
          prerelease: true
          projectPath: ./host
          args: ${{ matrix.args }}