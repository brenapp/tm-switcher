/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/v1/bearer": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Obtains a bearer token from the DWAB authorization server. */
        get: operations["getApiV1Bearer"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/stats/start": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** @description Record statistics about usage. */
        put: operations["putApiV1StatsStart"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: never;
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    getApiV1Bearer: {
        parameters: {
            query?: never;
            header: {
                Authorization: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Bearer token obtained successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @constant */
                        success: true;
                        token: {
                            access_token: string;
                            token_type: string;
                            expires_in: number;
                        };
                    } | {
                        /** @constant */
                        success: false;
                        error: "Could not obtain a bearer token from DWAB server" | "DWAB Third-Party Authorization Credentials are invalid" | "DWAB Third-Party Authorization Credentials have expired";
                        error_details?: unknown;
                    };
                };
            };
            /** @description Bad request, likely due to missing or malformed Authorization header. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @constant */
                        success: false;
                        error: "Could not obtain a bearer token from DWAB server" | "DWAB Third-Party Authorization Credentials are invalid" | "DWAB Third-Party Authorization Credentials have expired";
                        error_details?: unknown;
                    };
                };
            };
            /** @description Forbidden, invalid broker token. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @constant */
                        success: false;
                        error: "Could not obtain a bearer token from DWAB server" | "DWAB Third-Party Authorization Credentials are invalid" | "DWAB Third-Party Authorization Credentials have expired";
                        error_details?: unknown;
                    };
                };
            };
        };
    };
    putApiV1StatsStart: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    timestamp: string;
                    event: {
                        name: string;
                        sku: string;
                    };
                    /** @enum {string} */
                    product: "tm-switcher";
                };
            };
        };
        responses: {
            /** @description Bearer token obtained successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @constant */
                        success: true;
                    };
                };
            };
        };
    };
}
